{
  "uid" : "ef22b9609f17a1be",
  "name" : "正常购买流程",
  "fullName" : "cases.test_buy_goods.TestFlow#test_buy_flow",
  "historyId" : "83b610b7c6de45e159e36418aa02765d",
  "time" : {
    "start" : 1655183098711,
    "stop" : 1655183183742,
    "duration" : 85031
  },
  "description" : "用户选择商品进行购买，断言购买商品数据正确",
  "descriptionHtml" : "<p>用户选择商品进行购买，断言购买商品数据正确</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"Sub-orders gwc-qjs\" href=\"javascript:void(0);\" onclick=\"submit_order();\">...</a> is not clickable at point (1289, 692). Other element would receive the click: <div class=\"layui-layer-shade\" id=\"layui-layer-shade1\" times=\"1\" style=\"z-index:19891014; background-color:#000; opacity:0.8; filter:alpha(opacity=80);\"></div>\n  (Session info: chrome=102.0.5005.115)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x009CD953+2414931]\n\tOrdinal0 [0x0095F5E1+1963489]\n\tOrdinal0 [0x0084C6B8+837304]\n\tOrdinal0 [0x0087FC27+1047591]\n\tOrdinal0 [0x0087DC08+1039368]\n\tOrdinal0 [0x0087B90B+1030411]\n\tOrdinal0 [0x0087A659+1025625]\n\tOrdinal0 [0x00870293+983699]\n\tOrdinal0 [0x0089449C+1131676]\n\tOrdinal0 [0x0086FC74+982132]\n\tOrdinal0 [0x008946B4+1132212]\n\tOrdinal0 [0x008A4812+1198098]\n\tOrdinal0 [0x008942B6+1131190]\n\tOrdinal0 [0x0086E860+976992]\n\tOrdinal0 [0x0086F756+980822]\n\tGetHandleVerifier [0x00C3CC62+2510274]\n\tGetHandleVerifier [0x00C2F760+2455744]\n\tGetHandleVerifier [0x00A5EABA+551962]\n\tGetHandleVerifier [0x00A5D916+547446]\n\tOrdinal0 [0x00965F3B+1990459]\n\tOrdinal0 [0x0096A898+2009240]\n\tOrdinal0 [0x0096A985+2009477]\n\tOrdinal0 [0x00973AD1+2046673]\n\tBaseThreadInitThunk [0x7757FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77957A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77957A4E+238]",
  "statusTrace" : "self = <cases.test_buy_goods.TestFlow testMethod=test_buy_flow>\n\n    @allure.title(\"正常购买流程\")\n    @allure.description(\"用户选择商品进行购买，断言购买商品数据正确\")\n    def test_buy_flow(self):\n        with allure.step(\"选择商品加入购物车流程\"):\n            allure.attach(f\"1.输入正确的用户名:{self.username}和密码:{self.password},进行登录\")\n            allure.attach(\"2.选择商品，加入购物车，支付下单\")\n            allure.attach(\"2.选择商品，加入购物车，支付下单\")\n        self.bf.login(self.driver, self.username, self.password, self.verify_code)\n        sleep(5)\n>       self.bf.buy_goods(self.driver)\n\ncases\\test_buy_goods.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlogic\\test_logic.py:59: in buy_goods\n    driver.find_element(*SettlePage.submit_order).click()\nD:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nD:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BF324B2A60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77957A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77957A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"Sub-orders gwc-qjs\" href=\"javascript:void(0);\" onclick=\"submit_order();\">...</a> is not clickable at point (1289, 692). Other element would receive the click: <div class=\"layui-layer-shade\" id=\"layui-layer-shade1\" times=\"1\" style=\"z-index:19891014; background-color:#000; opacity:0.8; filter:alpha(opacity=80);\"></div>\nE         (Session info: chrome=102.0.5005.115)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x009CD953+2414931]\nE       \tOrdinal0 [0x0095F5E1+1963489]\nE       \tOrdinal0 [0x0084C6B8+837304]\nE       \tOrdinal0 [0x0087FC27+1047591]\nE       \tOrdinal0 [0x0087DC08+1039368]\nE       \tOrdinal0 [0x0087B90B+1030411]\nE       \tOrdinal0 [0x0087A659+1025625]\nE       \tOrdinal0 [0x00870293+983699]\nE       \tOrdinal0 [0x0089449C+1131676]\nE       \tOrdinal0 [0x0086FC74+982132]\nE       \tOrdinal0 [0x008946B4+1132212]\nE       \tOrdinal0 [0x008A4812+1198098]\nE       \tOrdinal0 [0x008942B6+1131190]\nE       \tOrdinal0 [0x0086E860+976992]\nE       \tOrdinal0 [0x0086F756+980822]\nE       \tGetHandleVerifier [0x00C3CC62+2510274]\nE       \tGetHandleVerifier [0x00C2F760+2455744]\nE       \tGetHandleVerifier [0x00A5EABA+551962]\nE       \tGetHandleVerifier [0x00A5D916+547446]\nE       \tOrdinal0 [0x00965F3B+1990459]\nE       \tOrdinal0 [0x0096A898+2009240]\nE       \tOrdinal0 [0x0096A985+2009477]\nE       \tOrdinal0 [0x00973AD1+2046673]\nE       \tBaseThreadInitThunk [0x7757FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77957A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77957A4E+238]\n\nD:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_unittest_setUpClass_fixture_TestFlow",
    "time" : {
      "start" : 1655183098709,
      "stop" : 1655183098709,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "用户选择商品进行购买，断言购买商品数据正确",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"Sub-orders gwc-qjs\" href=\"javascript:void(0);\" onclick=\"submit_order();\">...</a> is not clickable at point (1289, 692). Other element would receive the click: <div class=\"layui-layer-shade\" id=\"layui-layer-shade1\" times=\"1\" style=\"z-index:19891014; background-color:#000; opacity:0.8; filter:alpha(opacity=80);\"></div>\n  (Session info: chrome=102.0.5005.115)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x009CD953+2414931]\n\tOrdinal0 [0x0095F5E1+1963489]\n\tOrdinal0 [0x0084C6B8+837304]\n\tOrdinal0 [0x0087FC27+1047591]\n\tOrdinal0 [0x0087DC08+1039368]\n\tOrdinal0 [0x0087B90B+1030411]\n\tOrdinal0 [0x0087A659+1025625]\n\tOrdinal0 [0x00870293+983699]\n\tOrdinal0 [0x0089449C+1131676]\n\tOrdinal0 [0x0086FC74+982132]\n\tOrdinal0 [0x008946B4+1132212]\n\tOrdinal0 [0x008A4812+1198098]\n\tOrdinal0 [0x008942B6+1131190]\n\tOrdinal0 [0x0086E860+976992]\n\tOrdinal0 [0x0086F756+980822]\n\tGetHandleVerifier [0x00C3CC62+2510274]\n\tGetHandleVerifier [0x00C2F760+2455744]\n\tGetHandleVerifier [0x00A5EABA+551962]\n\tGetHandleVerifier [0x00A5D916+547446]\n\tOrdinal0 [0x00965F3B+1990459]\n\tOrdinal0 [0x0096A898+2009240]\n\tOrdinal0 [0x0096A985+2009477]\n\tOrdinal0 [0x00973AD1+2046673]\n\tBaseThreadInitThunk [0x7757FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77957A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77957A4E+238]",
    "statusTrace" : "self = <cases.test_buy_goods.TestFlow testMethod=test_buy_flow>\n\n    @allure.title(\"正常购买流程\")\n    @allure.description(\"用户选择商品进行购买，断言购买商品数据正确\")\n    def test_buy_flow(self):\n        with allure.step(\"选择商品加入购物车流程\"):\n            allure.attach(f\"1.输入正确的用户名:{self.username}和密码:{self.password},进行登录\")\n            allure.attach(\"2.选择商品，加入购物车，支付下单\")\n            allure.attach(\"2.选择商品，加入购物车，支付下单\")\n        self.bf.login(self.driver, self.username, self.password, self.verify_code)\n        sleep(5)\n>       self.bf.buy_goods(self.driver)\n\ncases\\test_buy_goods.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlogic\\test_logic.py:59: in buy_goods\n    driver.find_element(*SettlePage.submit_order).click()\nD:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nD:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BF324B2A60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77957A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77957A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"Sub-orders gwc-qjs\" href=\"javascript:void(0);\" onclick=\"submit_order();\">...</a> is not clickable at point (1289, 692). Other element would receive the click: <div class=\"layui-layer-shade\" id=\"layui-layer-shade1\" times=\"1\" style=\"z-index:19891014; background-color:#000; opacity:0.8; filter:alpha(opacity=80);\"></div>\nE         (Session info: chrome=102.0.5005.115)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x009CD953+2414931]\nE       \tOrdinal0 [0x0095F5E1+1963489]\nE       \tOrdinal0 [0x0084C6B8+837304]\nE       \tOrdinal0 [0x0087FC27+1047591]\nE       \tOrdinal0 [0x0087DC08+1039368]\nE       \tOrdinal0 [0x0087B90B+1030411]\nE       \tOrdinal0 [0x0087A659+1025625]\nE       \tOrdinal0 [0x00870293+983699]\nE       \tOrdinal0 [0x0089449C+1131676]\nE       \tOrdinal0 [0x0086FC74+982132]\nE       \tOrdinal0 [0x008946B4+1132212]\nE       \tOrdinal0 [0x008A4812+1198098]\nE       \tOrdinal0 [0x008942B6+1131190]\nE       \tOrdinal0 [0x0086E860+976992]\nE       \tOrdinal0 [0x0086F756+980822]\nE       \tGetHandleVerifier [0x00C3CC62+2510274]\nE       \tGetHandleVerifier [0x00C2F760+2455744]\nE       \tGetHandleVerifier [0x00A5EABA+551962]\nE       \tGetHandleVerifier [0x00A5D916+547446]\nE       \tOrdinal0 [0x00965F3B+1990459]\nE       \tOrdinal0 [0x0096A898+2009240]\nE       \tOrdinal0 [0x0096A985+2009477]\nE       \tOrdinal0 [0x00973AD1+2046673]\nE       \tBaseThreadInitThunk [0x7757FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77957A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77957A4E+238]\n\nD:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "选择商品加入购物车流程",
      "time" : {
        "start" : 1655183101665,
        "stop" : 1655183101668,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "866381b452aa7053",
        "name" : "723fbb46-1e73-4300-93e5-4669a8be7ef9-attachment.attach",
        "source" : "866381b452aa7053.attach",
        "type" : "text/plain",
        "size" : 67
      }, {
        "uid" : "9dfd8c19081795cb",
        "name" : "f0483387-66f6-4f99-bad4-6849c4053fd5-attachment.attach",
        "source" : "9dfd8c19081795cb.attach",
        "type" : "text/plain",
        "size" : 47
      }, {
        "uid" : "702715715d80ec43",
        "name" : "523a4547-865e-4a8e-9968-df8046b72421-attachment.attach",
        "source" : "702715715d80ec43.attach",
        "type" : "text/plain",
        "size" : 47
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 3
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3
  },
  "afterStages" : [ {
    "name" : "_unittest_setUpClass_fixture_TestFlow::0",
    "time" : {
      "start" : 1655183183973,
      "stop" : 1655183183973,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "购买模块"
  }, {
    "name" : "story",
    "value" : "购买子模块：购买流程"
  }, {
    "name" : "parentSuite",
    "value" : "cases"
  }, {
    "name" : "suite",
    "value" : "test_buy_goods"
  }, {
    "name" : "subSuite",
    "value" : "TestFlow"
  }, {
    "name" : "host",
    "value" : "yan"
  }, {
    "name" : "thread",
    "value" : "10356-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cases.test_buy_goods"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "ef22b9609f17a1be.json",
  "parameterValues" : [ ]
}